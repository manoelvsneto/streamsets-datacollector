#
# Multi-architecture Dockerfile for StreamSets Data Collector
# Optimized for ARM64 (aarch64) and AMD64 (x86_64)
# Uses multi-stage build for smaller final image
#

ARG BUILDPLATFORM=linux/amd64
ARG TARGETPLATFORM=linux/amd64

# Build stage
FROM --platform=$BUILDPLATFORM ubuntu:22.04 AS builder

# Avoid interactive prompts during build
ENV DEBIAN_FRONTEND=noninteractive

# Install build dependencies
RUN apt-get update && \
    apt-get install -y \
        curl \
        wget \
        unzip \
        ca-certificates \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Download and prepare StreamSets based on target architecture
ARG TARGETARCH
ARG SDC_VERSION=6.0.0-SNAPSHOT
ARG SDC_URL=http://nightly.streamsets.com.s3-us-west-2.amazonaws.com/datacollector/latest/tarball/streamsets-datacollector-core-${SDC_VERSION}.tgz

# Download protobuf compiler for target architecture
RUN case ${TARGETARCH} in \
        "amd64")  PROTOC_ARCH=x86_64  ;; \
        "arm64")  PROTOC_ARCH=aarch_64 ;; \
        *) echo "Unsupported architecture: ${TARGETARCH}" && exit 1 ;; \
    esac && \
    curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v25.1/protoc-25.1-linux-${PROTOC_ARCH}.zip" && \
    unzip "protoc-25.1-linux-${PROTOC_ARCH}.zip" -d /opt/protoc && \
    rm "protoc-25.1-linux-${PROTOC_ARCH}.zip"

# Runtime stage
FROM --platform=$TARGETPLATFORM ubuntu:22.04

# Avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=GMT

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y \
        # Java Runtime - install JRE first
        openjdk-17-jre-headless \
        # Create Java cert directory before installing ca-certificates-java
        && mkdir -p /etc/ssl/certs/java \
        && apt-get install -y \
        # Certificate management (after Java is installed)
        ca-certificates \
        ca-certificates-java \
        # System utilities
        curl \
        wget \
        sudo \
        hostname \
        iputils-ping \
        traceroute \
        psmisc \
        krb5-user \
        apache2-utils \
        # Process management
        procps \
        # Network utilities
        netcat-openbsd \
        dnsutils \
        && \
    # Fix Java certificates
    /var/lib/dpkg/info/ca-certificates-java.postinst configure && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy protoc from builder stage
COPY --from=builder /opt/protoc/bin/protoc /usr/local/bin/protoc
COPY --from=builder /opt/protoc/include /usr/local/include

# Set Java environment for current architecture
ARG TARGETARCH
RUN case ${TARGETARCH} in \
        "amd64")  JAVA_ARCH=amd64  ;; \
        "arm64")  JAVA_ARCH=arm64  ;; \
        *) echo "Unsupported architecture: ${TARGETARCH}" && exit 1 ;; \
    esac && \
    echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-${JAVA_ARCH}" >> /etc/environment

ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
ENV PATH="${JAVA_HOME}/bin:${PATH}:/usr/local/bin"

# Set correct JAVA_HOME at runtime
RUN ARCH=$(dpkg --print-architecture) && \
    if [ "$ARCH" = "arm64" ]; then \
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-arm64; \
    fi

# Configure DNS resolution priority
RUN echo 'hosts: files mdns4_minimal [NOTFOUND=return] dns mdns4' >> /etc/nsswitch.conf

# Set up GMT timezone
RUN ln -sf /usr/share/zoneinfo/GMT /etc/localtime && \
    echo "GMT" > /etc/timezone

# StreamSets user configuration
ARG SDC_UID=20159
ARG SDC_GID=20159
ARG SDC_USER=sdc

# Create StreamSets user
RUN groupadd -r -g ${SDC_GID} ${SDC_USER} && \
    useradd -r -u ${SDC_UID} -g ${SDC_GID} -m -d /home/${SDC_USER} -s /bin/bash ${SDC_USER}

# StreamSets installation paths
ARG SDC_VERSION=6.0.0-SNAPSHOT
ARG SDC_HOME="/opt/streamsets-datacollector-${SDC_VERSION}"

ENV SDC_CONF=/etc/sdc \
    SDC_DATA=/data \
    SDC_DIST=${SDC_HOME} \
    SDC_HOME=${SDC_HOME} \
    SDC_LOG=/logs \
    SDC_RESOURCES=/resources \
    USER_LIBRARIES_DIR=/opt/streamsets-datacollector-user-libs
ENV STREAMSETS_LIBRARIES_EXTRA_DIR="${SDC_DIST}/streamsets-libs-extras"

# Java options optimized for containers
ENV SDC_JAVA_OPTS="-Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8 -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0"

# Copy and run StreamSets configuration script
COPY sdc-configure.sh /tmp/
RUN chmod +x /tmp/sdc-configure.sh && /tmp/sdc-configure.sh

# Install additional stage libraries if requested
ARG SDC_LIBS
RUN if [ -n "${SDC_LIBS}" ]; then \
        "${SDC_DIST}/bin/streamsets" stagelibs -install="${SDC_LIBS}"; \
    fi

# Copy resources and extras
COPY resources/ ${SDC_RESOURCES}/
COPY sdc-extras/ ${STREAMSETS_LIBRARIES_EXTRA_DIR}/

# Set ownership
RUN chown -R ${SDC_USER}:${SDC_USER} ${SDC_RESOURCES}/ ${STREAMSETS_LIBRARIES_EXTRA_DIR}/

# Create directories with proper permissions
RUN mkdir -p ${SDC_DATA} ${SDC_LOG} ${SDC_CONF} && \
    chown -R ${SDC_USER}:${SDC_USER} ${SDC_DATA} ${SDC_LOG} ${SDC_CONF}

# Create Flight libs symlink if exists
RUN if [ -d "${SDC_DIST}/flightservice/opt/ibm" ]; then \
        ln -s ${SDC_DIST}/flightservice/opt/ibm /opt/ibm; \
    fi

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:18630/ || exit 1

# Switch to StreamSets user
USER ${SDC_USER}

# Expose ports
EXPOSE 18630 18631

# Copy entrypoint script
COPY docker-entrypoint.sh /
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["dc"]

# Add labels for better container management
LABEL org.label-schema.name="StreamSets Data Collector" \
      org.label-schema.description="StreamSets Data Collector for multi-architecture deployment" \
      org.label-schema.version="${SDC_VERSION}" \
      org.label-schema.vendor="StreamSets Inc." \
      org.label-schema.schema-version="1.0"
