trigger:
  branches:
    include: [ main ]
  paths:
    exclude:
      - README.md
      - docs/*

pr:
  branches:
    include: [ main ]

# Para self-hosted, use só "name" (remova vmImage se seu agente é próprio)
pool:
  name: Arm64

variables:
  dockerRegistryServiceConnection: 'DockerConnection'
  imageRepository: 'manoelvsneto/streamsets-datacollector'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  kubernetesServiceConnection: 'K8SOracleCloud'
  kubernetesNamespace: 'streamsets'

stages:
- stage: Build
  displayName: Build & Push (multi-arch)
  jobs:
  - job: Build
    displayName: Build & Push Images
    pool:
      name: Arm64
    steps:
    - task: Docker@2
      displayName: Docker Login
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)

    - script: |
        set -euxo pipefail
        docker buildx create --use --name multi || docker buildx use multi
        docker run --privileged --rm tonistiigi/binfmt --install amd64,arm64 || true

        echo ">> Building and pushing: $(imageRepository):$(tag) and :latest"
        docker buildx build \
          --platform linux/amd64,linux/arm64/v8 \
          -t $(imageRepository):$(tag) \
          -t $(imageRepository):latest \
          -f "$(dockerfilePath)" \
          "$(Build.SourcesDirectory)" \
          --push

        docker buildx imagetools inspect $(imageRepository):$(tag)
      displayName: 'Buildx: build & push (amd64 + arm64)'

    - task: PublishBuildArtifacts@1
      displayName: Publish Kubernetes manifests
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/k8s'
        artifactName: 'k8s-manifests'

    - script: |
        find "$(Build.ArtifactStagingDirectory)" -name "kustomization.yaml" -delete || true
      displayName: Clean kustomization files from artifacts

- stage: Deploy_Prod
  displayName: Deploy to Production
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: Deploy to Kubernetes (streamsets)
    pool:
      name: Arm64
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              artifactName: 'k8s-manifests'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: KubernetesManifest@0
            displayName: Apply manifests
            inputs:
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: $(kubernetesNamespace)
              action: deploy
              manifests: |
                $(System.ArtifactsDirectory)/k8s-manifests/secret.yaml
                $(System.ArtifactsDirectory)/k8s-manifests/configmap.yaml
                $(System.ArtifactsDirectory)/k8s-manifests/persistent-volume.yaml
                $(System.ArtifactsDirectory)/k8s-manifests/deployment.yaml
                $(System.ArtifactsDirectory)/k8s-manifests/service.yaml
                $(System.ArtifactsDirectory)/k8s-manifests/hpa.yaml
                $(System.ArtifactsDirectory)/k8s-manifests/network-policy.yaml
                $(System.ArtifactsDirectory)/k8s-manifests/ingress.yaml
              containers: '$(imageRepository):$(tag)'
