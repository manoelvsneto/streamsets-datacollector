pool:
  name: Arm64
  vmImage: 'ubuntu-22.04'

trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - docs/*

pr:
  branches:
    include:
    - main

variables:
  # Container Registry Service Connection
  dockerRegistryServiceConnection: 'DockerConnection'
  imageRepository: 'manoelvsneto/streamsets-datacollector'
  containerRegistry: 'DockerConnection'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Azure Kubernetes Service
  kubernetesServiceConnection: 'K8SOracleCloud'
  kubernetesNamespace: 'streamsets'
  
  # Agent VM image name
  vmImageName: 'ubuntu-22.04'

stages:
- stage: Build
  displayName: Build and Test
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build Docker image
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: Push Docker image to ACR
      inputs:
        command: push
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Kubernetes manifests'
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/k8s'
        artifactName: 'k8s-manifests'
        
    - script: |
        # Remove kustomization.yaml from published artifacts since cluster doesn't support it
        find $(Build.ArtifactStagingDirectory) -name "kustomization.yaml" -delete
      displayName: 'Clean kustomization files from artifacts'


- stage: Deploy_Prod
  displayName: Deploy to Production
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS Production
    pool:
      vmImage: $(vmImageName)
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              artifactName: 'k8s-manifests'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: Kubernetes@1
            displayName: Verify namespace exists
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: $(kubernetesServiceConnection)
              command: 'get'
              arguments: 'namespace streamsets --insecure-skip-tls-verify=true'
            continueOnError: true

          - script: |
              # Remove kustomization.yaml antes da aplicação
              rm -f $(System.ArtifactsDirectory)/k8s-manifests/kustomization.yaml
              echo "Arquivos disponíveis:"
              ls -la $(System.ArtifactsDirectory)/k8s-manifests/
            displayName: 'Remove kustomization.yaml and list files'

          - task: Kubernetes@1
            displayName: kubectl apply manifests
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: $(kubernetesServiceConnection)
              command: 'apply'
              arguments: '-f $(System.ArtifactsDirectory)/k8s-manifests/ --namespace=streamsets --validate=false --insecure-skip-tls-verify=true'

          - task: Kubernetes@1
            displayName: kubectl set image
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: $(kubernetesServiceConnection)
              command: 'set'
              arguments: 'image deployment/streamsets-datacollector streamsets-datacollector=$(imageRepository):$(tag) --namespace=streamsets --insecure-skip-tls-verify=true'

          - task: Kubernetes@1
            displayName: Wait for rollout to complete
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: $(kubernetesServiceConnection)
              command: 'rollout'
              arguments: 'status deployment/streamsets-datacollector --namespace=streamsets --timeout=300s --insecure-skip-tls-verify=true'

          - script: |
              # Verificar o status do deployment
              kubectl get pods --namespace=streamsets --selector=app=streamsets-datacollector --insecure-skip-tls-verify=true
              kubectl get replicasets --namespace=streamsets --selector=app=streamsets-datacollector --insecure-skip-tls-verify=true
              echo "Deployment atualizado com imagem: $(imageRepository):$(tag)"
            displayName: 'Verify deployment status'
            continueOnError: true
