

# 00-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: streamsets
---
# 00-clusterissuers.yaml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    email: contato@archse.eng.br
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    email: contato@archse.eng.br
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
    - http01:
        ingress:
          class: nginx
---
# 01-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: streamsets-config
  namespace: streamsets
data:
  # Flags do Java (GC no stdout) e portas
  SDC_JAVA_OPTS: "-Xms512m -Xmx2g -Djdk.nio.maxCachedBufferSize=262144 -Xlog:gc*:stdout:time,uptime,level"
  SDC_CONF_HTTP_PORT: "18630"
  SDC_CONF_HTTPS_PORT: "18631"

  # sdc.properties mínimo (ajuste conforme necessidade)
  sdc.properties: |-
    http.port=${SDC_CONF_HTTP_PORT}
    https.port=${SDC_CONF_HTTPS_PORT}
    http.authentication=none
    production.maxBatchSize=1000
    preview.maxBatchSize=1000
    log.level=INFO
---
# 02-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: streamsets-secret
  namespace: streamsets
type: Opaque
data:
  # echo -n 'admin' | base64
  admin-user: YWRtaW4=
  # echo -n 'changeme!' | base64
  admin-password: Y2hhbmdlbWUh
---
# 03-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: streamsets-data-pvc
  namespace: streamsets
spec:
  accessModes: [ReadWriteOnce]
  resources:
    requests:
      storage: 10Gi
  storageClassName: microk8s-hostpath
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: streamsets-logs-pvc
  namespace: streamsets
spec:
  accessModes: [ReadWriteOnce]
  resources:
    requests:
      storage: 5Gi
  storageClassName: microk8s-hostpath
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: streamsets-resources-pvc
  namespace: streamsets
spec:
  accessModes: [ReadWriteOnce]
  resources:
    requests:
      storage: 2Gi
  storageClassName: microk8s-hostpath
---
# 04-deployment.yaml (atualizado para corrigir permissões e diretórios de escrita)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: streamsets-datacollector
  namespace: streamsets
  labels:
    app: streamsets-datacollector
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: streamsets-datacollector
  template:
    metadata:
      labels:
        app: streamsets-datacollector
    spec:
      nodeSelector:
        kubernetes.io/arch: arm64
      containers:
      - name: streamsets-datacollector
        image: manoelvsneto/streamsets-datacollector:latest
        imagePullPolicy: Always
        securityContext:
          runAsUser: 0            # roda como root para permitir escrita em /opt/streamsets
        ports:
        - containerPort: 18630
          name: http
        - containerPort: 18631
          name: https
        env:
        - name: SDC_JAVA_OPTS
          valueFrom:
            configMapKeyRef:
              name: streamsets-config
              key: SDC_JAVA_OPTS
        - name: SDC_CONF_HTTP_PORT
          valueFrom:
            configMapKeyRef:
              name: streamsets-config
              key: SDC_CONF_HTTP_PORT
        - name: SDC_CONF_HTTPS_PORT
          valueFrom:
            configMapKeyRef:
              name: streamsets-config
              key: SDC_CONF_HTTPS_PORT
        - name: ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: streamsets-secret
              key: admin-user
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: streamsets-secret
              key: admin-password
        resources:
          requests:
            cpu: "500m"
            memory: "2Gi"
          limits:
            cpu: "2000m"
            memory: "4Gi"
        livenessProbe:
          httpGet:
            path: /public-rest/ping
            port: 18630
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /public-rest/ping
            port: 18630
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        startupProbe:
          httpGet:
            path: /public-rest/ping
            port: 18630
          periodSeconds: 10
          failureThreshold: 60
        volumeMounts:
        # MESMO PVC montado em /opt/streamsets/var e /opt/streamsets/data (evita Permission denied do sdc.id)
        - name: data-volume
          mountPath: /opt/streamsets/var
        - name: data-volume
          mountPath: /opt/streamsets/data
        # Logs em PVC (evita Permission denied do gc.log)
        - name: logs-volume
          mountPath: /opt/streamsets/log
        # Resources e sdc.properties
        - name: resources-volume
          mountPath: /resources
        - name: config-volume
          mountPath: /etc/sdc/sdc.properties
          subPath: sdc.properties
          readOnly: true
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: streamsets-data-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: streamsets-logs-pvc
      - name: resources-volume
        persistentVolumeClaim:
          claimName: streamsets-resources-pvc
      - name: config-volume
        configMap:
          name: streamsets-config
---
# 05-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: streamsets-datacollector
  namespace: streamsets
  labels:
    app: streamsets-datacollector
spec:
  type: ClusterIP
  selector:
    app: streamsets-datacollector
  ports:
  - name: http
    port: 18630
    targetPort: 18630
    protocol: TCP
  - name: https
    port: 18631
    targetPort: 18631
    protocol: TCP
---
# 06-ingress.yaml  (atualizado: sem redirect forçado para liberar o HTTP-01)
# 06-ingress.yaml  (sem redirect forçado para liberar o HTTP-01)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: streamsets-ingress
  namespace: streamsets
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - streamsets.archse.eng.br
      secretName: streamsets-tls
  rules:
    - host: streamsets.archse.eng.br
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: streamsets-datacollector
                port:
                  number: 18630
---
# 07-certificate.yaml  (cert explícito para o domínio)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: streamsets-cert
  namespace: streamsets
spec:
  secretName: streamsets-tls             # será criado automaticamente como type: kubernetes.io/tls
  commonName: streamsets.archse.eng.br
  dnsNames:
    - streamsets.archse.eng.br
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
---
# 07-hpa.yaml (opcional)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: streamsets-datacollector
  namespace: streamsets
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: streamsets-datacollector
  minReplicas: 1
  maxReplicas: 1
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
---
# 08-network-policy.yaml  (atualize no namespace streamsets)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: streamsets-allow-datacollector
  namespace: streamsets
spec:
  podSelector:
    matchLabels:
      app: streamsets-datacollector
  policyTypes: [Ingress, Egress]
  ingress:
  - {}
  egress:
  - {}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-acme-http01-solvers
  namespace: streamsets
spec:
  podSelector:
    matchLabels:
      "acme.cert-manager.io/http01-solver": "true"
  policyTypes: [Ingress, Egress]
  ingress:
  - {}     # libera acesso aos pods solver do cert-manager
  egress:
  - {}     # permite que os pods solver acessem a Internet/ACME

